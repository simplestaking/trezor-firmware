syntax = "proto2";
package hw.trezor.messages.cosmos;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageCosmos";

/**
 * Request: Ask device for Cosmos address corresponding to address_n path
 * @start
 * @next CosmosAddress
 * @next Failure
 */
message CosmosGetAddress {
    repeated uint32 address_n = 1;      // BIP-32 path to derive the key from master node
    optional bool show_display = 2;     // optionally show on display before sending the result
}

/**
 * Response: Contains Cosmos address derived from device private seed
 * @end
 */
message CosmosAddress {
    optional string address = 1;        // Coin address in bech32 encoding
}

/**
 * Request: Ask device for Cosmos public key corresponding to address_n path
 * @start
 * @next CosmosPublicKey
 */
message CosmosGetPublicKey {
    repeated uint32 address_n = 1;          // BIP-32 path to derive the key from master node
    optional bool show_display = 2;         // Optionally show on display before sending the result
}

/**
 * Response: Contains Cosmos public key derived from device private seed
 * @end
 */
message CosmosPublicKey {
    optional string public_key = 1;          // bech32 encoded Cosmos public key with prefix
    optional string public_key_hex = 2;      // hex encoded Cosmos public key
}

message CosmosSignTx {
    repeated uint32 address_n = 1;
    optional uint32 account_number = 2;
    optional string chain_id = 3;
    optional Fee fee = 4;
    optional uint64 sequence = 5;
    optional string memo = 6;
    optional Msg msgs = 7;

    message Msg {
        optional string type = 1;
        optional string from_address = 2;
        optional string to_address = 3;
        optional Amount amount = 4;
    }

    message Amount {
        optional string denom = 1;
        optional uint32 amount = 2;
    }

    message Fee {
        optional Amount amount = 1;
        optional uint32 gas = 2;
    }
}

message CosmosSignedTx {
    optional bytes signature = 1;
}



/*  "type": "cosmos-sdk/StdTx",
"value": {
    "msg": [
      {
        "type": "cosmos-sdk/MsgSend",
        "value": {
          "from_address": "cosmos1u4jc75qlrk2tsjak2leqngh6yvxrlca8ateprj",
          "to_address": "cosmos1jm4nfgjuawuhzu02g7lwhy328h47v5jsdr0x6r",
          "amount": [
            {
              "denom": "muon",
              "amount": "1"
            }
          ]
        }
      }
    ],
    "fee": {
      "amount": [],
      "gas": "200000"
    },
    "signatures": null,
    "memo": ""
  }
} */