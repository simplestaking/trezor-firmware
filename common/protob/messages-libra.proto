syntax = "proto2";
package hw.trezor.messages.libra;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageLibra";

/**
 * Request: Ask device for Tezos address corresponding to address_n path
 * @start
 * @next TezosAddress
 * @next Failure
 */
message LibraGetAddress {
    repeated uint32 address_n = 1;      // BIP-32 path to derive the key from master node
    optional bool show_display = 2;     // optionally show on display before sending the result
}

/**
 * Response: Contains Libra address derived from device private seed
 * @end
 */
message LibraAddress {
    repeated uint32 address = 1;        // Coin address
}

/**
 * Request: Ask device for Libra public key corresponding to address_n path
 * @start
 * @next LibraPublicKey
 */
message LibraGetPublicKey {
    repeated uint32 address_n = 1;          // BIP-32 path to derive the key from master node
    optional bool show_display = 2;         // Optionally show on display before sending the result
}

/**
 * Response: Contains Libra public key derived from device private seed
 * @end
 */
message LibraPublicKey {
    optional string public_key = 1;          // b58 encoded Tezos public key with prefix
}

message LibraSignTx {
    repeated uint32 address_n = 1;
    optional bytes sender_account = 2;
    optional uint64 sequence_number = 3;
    //optional Program payload = 4;
    oneof payload {
        Program program = 4;
        WriteSet write_set = 5;
    }
    optional uint64 max_gas_amount = 6;
    optional uint64 gas_unit_price = 7;
    optional uint64 expiration_time = 8;


    message Program {
        optional bytes code = 1;
        repeated TransactionArguments args = 2;
        repeated bytes modules = 3;
    }

    message WriteSet {
        optional string blob = 1;
    }



    message TransactionArguments {
        enum ArgType {
            U64 = 0;
            ADDRESS = 1;
            STRING = 2;
            BYTEARRAY = 3;
        }
        optional ArgType type = 1;
        optional bytes data = 2;
    }
}

message LibraSignedTx {
    optional bytes raw_txn_bytes = 1;
    optional bytes sender_public_key = 2;
    optional bytes signature = 3;
}