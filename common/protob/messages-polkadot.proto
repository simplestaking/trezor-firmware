syntax = "proto2";
package hw.trezor.messages.polkadot;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessagePolkadot";

/**
 * Request: Ask device for Tezos address corresponding to address_n path
 * @start
 * @next PolkadotAddress
 * @next Failure
 */
message PolkadotGetAddress {
    repeated uint32 address_n = 1;      // BIP-32 path to derive the key from master node
    optional bool show_display = 2;     // optionally show on display before sending the result
}

/**
 * Response: Contains Polkadot address derived from device private seed
 * @end
 */
message PolkadotAddress {
    optional string address = 1;        // Coin address in Base58 encoding
}

/**
 * Request: Ask device for Polkadot public key corresponding to address_n path
 * @start
 * @next PolkadotPublicKey
 */
message PolkadotGetPublicKey {
    repeated uint32 address_n = 1;          // BIP-32 path to derive the key from master node
    optional bool show_display = 2;         // Optionally show on display before sending the result
}

/**
 * Response: Contains Tezos public key derived from device private seed
 * @end
 */
message PolkadotPublicKey {
    optional string public_key = 1;          // b58 encoded Tezos public key with prefix
}

message PolkadotSignTx {
    repeated uint32 address_n = 1;
    optional uint32 era = 2;
    optional uint32 nonce = 3;
    optional uint32 tip = 4;
    optional bytes checkpoint_hash = 5;
    optional PolkadotBalanceTransfer transfer = 6;

    message PolkadotBalanceTransfer {
        optional uint32 module_index = 1;
        optional uint32 call_index = 2;
        optional bytes destination = 3;
        optional uint32 value = 4;
    }
}

message PolkadotSignedTx {
    optional string signature = 1;
}