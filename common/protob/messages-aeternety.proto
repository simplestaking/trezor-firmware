syntax = "proto2";
package hw.trezor.messages.aeternity;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageAeternity";

/**
 * Request: Ask device for Aetirnity address corresponding to address_n path
 * @start
 * @next AetirnityAddress
 * @next Failure
 */
message AeternityGetAddress {
    repeated uint32 address_n = 1;      // BIP-32 path to derive the key from master node
    optional bool show_display = 2;     // optionally show on display before sending the result
}

/**
 * Response: Contains Aetirnity address derived from device private seed
 * @end
 */
message AeternityAddress {
    optional string address = 1;        // Coin address in Base58 encoding
}

/**
 * Request: Ask device for Aetirnity public key corresponding to address_n path
 * @start
 * @next TezosPublicKey
 */
message AeternityGetPublicKey {
    repeated uint32 address_n = 1;          // BIP-32 path to derive the key from master node
    optional bool show_display = 2;         // Optionally show on display before sending the result
}

/**
 * Response: Contains Aetirnity public key derived from device private seed
 * @end
 */
message AeternityPublicKey {
    optional string public_key = 1;          // b58 encoded Tezos public key with prefix
}

//SPEND_TRANSACTION, for demonstration purposes
//TODO: implement the rest of the transactions in a structured way
message AeternitySignTx {
    repeated uint32 address_n = 1;
    optional uint32 vsn = 2;
    optional bytes sender_id = 3;
    optional bytes recipient_id = 4;
    optional uint32 amount = 5;
    optional uint32 fee = 6;
    optional uint32 ttl = 7;
    optional uint32 nonce = 8;
    optional bytes payload = 9;
}

message AeternitySignedTx {
    optional string signature = 1;
}

/*
_int(tag),
                _int(vsn),
                _id(kwargs.get("sender_id")),
                _id(kwargs.get("recipient_id")),
                _int(kwargs.get("amount")),
                _int(kwargs.get("fee")),  # index 5
                _int(kwargs.get("ttl")),
                _int(kwargs.get("nonce")),
                _binary(kwargs.get("payload"))
*/