syntax = "proto2";
package hw.trezor.messages.aeternity;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageAeternity";

/**
 * Request: Ask device for Aetirnity address corresponding to address_n path
 * @start
 * @next AetirnityAddress
 * @next Failure
 */
message AeternityGetAddress {
    repeated uint32 address_n = 1;      // BIP-32 path to derive the key from master node
    optional bool show_display = 2;     // optionally show on display before sending the result
}

/**
 * Response: Contains Aetirnity address derived from device private seed
 * @end
 */
message AeternityAddress {
    optional string address = 1;        // Coin address in Base58 encoding
}

/**
 * Request: Ask device for Aetirnity public key corresponding to address_n path
 * @start
 * @next TezosPublicKey
 */
message AeternityGetPublicKey {
    repeated uint32 address_n = 1;          // BIP-32 path to derive the key from master node
    optional bool show_display = 2;         // Optionally show on display before sending the result
}

/**
 * Response: Contains Aetirnity public key derived from device private seed
 * @end
 */
message AeternityPublicKey {
    optional string public_key = 1;          // b58 encoded Tezos public key with prefix
}

//SPEND_TRANSACTION, for demonstration purposes
//TODO: implement the rest of the transactions in a structured way
message AeternitySignTx {
    repeated uint32 address_n = 1;
    optional AeternityNetworkType network = 2;
    optional uint32 vsn = 3;
    optional uint32 fee = 4;
    optional uint32 ttl = 5;
    optional uint32 nonce = 6;

    optional AeternitySpendTransaction spend = 7;
    optional AeternityNameServicePreclaimTransaction aens_preclaim = 8;
    optional AeternityNameServiceClaimTransaction aens_claim = 9;
    optional AeternityNameServiceUpdateTransaction aens_update = 10;
    optional AeternityNameServiceTransferTransaction aens_transfer = 11;
    optional AeternityNameServiceRevokeTransaction aens_revoke = 12;
    optional AeternityContractCreateTransaction contract_create = 13;
    optional AeternityContractCallTransaction contract_call = 14;
    optional AeternityChannelCreateTransaction channel_create = 15;
    optional AeternityChannelDepositTransaction channel_deposit = 16;
    optional AeternityChannelWithdrawTransaction channel_withdraw = 17;
    optional AeternityChannelCloseMutualTransaction channel_close_mutual = 18;
    optional AeternityChannelCloseSoloTransaction channel_close_solo = 19;
    optional AeternityChannelSlashTransaction channel_slash = 20;
    optional AeternityChannelSettleTransaction channel_settle = 21;
    optional AeternityChannelSnapshotTransaction channel_snapshot = 22;
    optional AeternityChannelForceProgressTransaction channel_force_progress = 23;
    optional AeternityOracleRegisterTransaction oracle_register = 24;
    optional AeternityOracleQueryTransaction oracle_query = 25;
    optional AeternityOracleResponseTransaction oracle_response = 26;
    optional AeternityOracleExtendTransaction oracle_extend = 27;



    message AeternitySpendTransaction {
        optional string sender_id = 4;
        optional string recipient_id = 5;
        optional uint32 amount = 6;
        optional string payload = 10;
    }

    message AeternityNameServicePreclaimTransaction {
        optional string account_id = 1;
        optional string commitment_id = 21;
    }

    message AeternityNameServiceClaimTransaction {
        optional string account_id = 1;
        optional string commitment_id = 3;
        optional string name = 4;
        optional string name_salt = 5;
    }

    message AeternityNameServiceUpdateTransaction {
        //TODO: anlyse 'pointers'
    }

    message AeternityNameServiceTransferTransaction {
        optional string account_id = 1;
        optional string name_id = 2;
        optional string recipient_id = 3;

    }

    message AeternityNameServiceRevokeTransaction {
        optional string account_id = 1;
        optional string aname_id = 2;
    }

    message AeternityContractCreateTransaction {
        optional string owner_id = 1;
        optional string code = 2;
        optional uint32 vm_version = 3;
        optional uint32 abi_version = 4;
        optional uint32 deposit = 5;
        optional uint32 amount = 6;
        optional uint32 gas = 7;
        optional uint32 gas_price = 8;
        optional string call_data = 9;
    }

    message AeternityContractCallTransaction {
        optional string caller_id = 1;
        optional string contract_id = 2;
        optional uint32 abi_vbersion = 3;
        optional uint32 amount = 4;
        optional uint32 gas = 5;
        optional uint32 gas_price = 6;
        optional string call_data = 7;
    }

    message AeternityChannelCreateTransaction {
        optional string initiator = 1;
        optional uint32 initiator_amount = 2;
        optional string responder = 3;
        optional uint32 responder_amount = 4;
        optional uint32 channel_reserve = 5;
        optional uint32 lock_period = 6;
        repeated string delegate_ids = 7;
        optional string sate_hash = 8;
    }

    message AeternityChannelDepositTransaction {
        optional string channel_id = 1;
        optional string from_id = 2;
        optional uint32 amount = 3;
        optional string state_hash = 4;
        optional uint32 round = 5;
    }

    message AeternityChannelWithdrawTransaction {
        optional string channel_id = 1;
        optional string to_id = 2;
        optional uint32 amount = 3;
        optional string state_hash = 4;
        optional uint32 round = 5;
    }

    message AeternityChannelCloseMutualTransaction {
        optional string channel_id = 1;
        optional string from_id = 2;
        optional uint32 initiator_amount_final = 3;
        optional uint32 responder_amount_final = 4;
    }

    message AeternityChannelCloseSoloTransaction {
        optional string channel_id = 1;
        optional string from_id = 2;
        optional string payload = 3;
        //TODO: implement support for _poi (depends on python aepp-sdk)
        optional uint32 responder_amount_final = 4;
    }

    // Note: same as the one above
    message AeternityChannelSlashTransaction {
        optional string channel_id = 1;
        optional string from_id = 2;
        optional string payload = 3;
        //TODO: implement support for _poi (depends on python aepp-sdk)
        optional uint32 responder_amount_final = 4;
    }

    message AeternityChannelSettleTransaction {
        optional string channel_id = 1;
        optional string from_id = 2;
        optional uint32 initiator_amount_final = 3;
        optional uint32 responder_amount_final = 4;
    }

    message AeternityChannelSnapshotTransaction {
        optional string channel_id = 1;
        optional string from_id = 2;
        optional string payload = 3;
    }

    message AeternityChannelForceProgressTransaction {
        optional string channel_id = 1;
        optional string from_id = 2;
        optional string payload = 3;
        optional uint32 round = 4;
        optional string update = 5;
        optional string state_hash = 6;
        // Note: imp[lement _trees when it comes out
    }

    message AeternityOracleRegisterTransaction {
        optional string account_id = 1;
        optional string query_format = 2;
        optional string response_format = 3;
        optional uint32 query_fee = 4;
        optional string oracle_ttl_type = 5; // TODO: possible enum
        optional string oracle_ttl_value = 6; // TODO: structure?
        optional uint32 vm_version = 7;
    }

    message AeternityOracleQueryTransaction {
        optional string sender_id = 1;
        optional string oracle_id = 2;
        optional string query = 3;
        optional uint32 query_fee = 4;
        optional string oracle_ttl_type = 5; // TODO: possible enum
        optional string oracle_ttl_value = 6; // TODO: structure?
        optional string response_ttl_type = 7; // TODO: possible enum
        optional string response_ttl_value = 8; // TODO: structure?
}

    message AeternityOracleResponseTransaction {
        optional string oracle_id = 1;
        optional string query_id = 2;
        optional string resposne = 3;
        optional string response_ttl_type = 4; // TODO: possible enum
        optional string response_ttl_value = 5; // TODO: structure?
    }

    message AeternityOracleExtendTransaction {
        optional string oracle_id = 1;
        optional string oracle_ttl_type = 2; // TODO: possible enum
        optional string oracle_ttl_value = 3; // TODO: structure?
    }


    enum AeternityNetworkType{
        TestNet = 0;
        MainNet = 1;
    }
}

message AeternitySignedTx {
    optional string signature = 1;
    optional bytes raw_bytes = 2;
    optional bytes raw_encoded_tx = 3;
    optional string tx_hash = 4;
}
